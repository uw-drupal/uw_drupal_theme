<?php

/**
 * @file
 * Functions to support the UW Drupal Theme, Bootstrap Barrio subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Template\Attribute;
use Drupal\block\Entity\Block;
use Drupal\file\Entity\File;

/**
 * UW colors.
 */
abstract class UwColor {
  const PURPLE = '#4b2e83';
  const GOLD = '#b7a57a';
  const METALLIC_GOLD = '#85754d';
  const LIGHT_GREY = '#d9d9d9';
  const DARK_GREY = '#444444';
  const BLACK = '#000000';
  const WHITE = '#ffffff';

}

/**
 * Implements hook_preprocess_html().
 *
 * Adds additional classes to <body>
 */
function uw_drupal_theme_preprocess_html(&$variables) {
  $classes = [];
  $classes[] = 'page-template';
  $classes[] = 'page-templates';
  $classes[] = 'page';
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $hero_template = theme_get_setting('uw_drupal_theme_hero_template_front');
  }
  else {
    $hero_template = theme_get_setting('uw_drupal_theme_hero_template_other');
  }
  switch ($hero_template) {
    case 'default':
      $classes[] = 'page-template-default';
      $classes[] = 'page-templatespage-template-default';
      break;

    case 'big_hero':
      $classes[] = 'page-template-big-hero';
      $classes[] = 'page-templatestemplate-big-hero-php';
      break;

    case 'small_hero':
      $classes[] = 'page-template-small-hero';
      $classes[] = 'page-templatestemplate-small-hero-php';
      break;

    case 'no_hero':
      $classes[] = 'page-template-no-hero';
      $classes[] = 'page-templatestemplate-no-hero-php';
      break;

    case 'no_title':
      $classes[] = 'page-template-no-title';
      $classes[] = 'page-templatestemplate-no-title-php';
      break;
  }

  $variables['attributes']['class'] = array_merge($variables['attributes']['class'], $classes);
}

/**
 * Implements hook_preprocess_block().
 */
function uw_drupal_theme_preprocess_block(&$variables) {
  // Add the region value as an attribute so it can be referenced
  // or targeted later.
  if (isset($variables['elements']['#id'])) {
    $region = Block::load($variables['elements']['#id'])->getRegion();
    // kint($region);
    $variables['content']['#attributes']['region'] = $region;
  }

  if ($variables['attributes']['id'] === 'block-uw-drupal-theme-uwsidebarmenu') {
    $variables['base_path'] = base_path();
    $variables['content'] = _uw_drupal_theme_build_uw_sidebar_menu();
  }
  // Load the default search options from settings.
  global $base_url;
  $variables['base_path'] = $base_url;
  $variables['default_search_scope'] = theme_get_setting('uw_drupal_theme_default_search_scope');
}

/**
 * Implements template_preprocess_page().
 */
function uw_drupal_theme_preprocess_page(&$variables) {
  global $base_url;
  $theme = \Drupal::theme()->getActiveTheme();
  $theme_path = $theme->getPath();

  // Set base path so it's usable in templates beyond page.html.twig;
  // also set the current year.
  $variables['base_path'] = $base_url;
  $variables['current_year'] = date("Y");

  // Need the default search options in page.html.twig.
  $variables['default_search_scope'] = theme_get_setting('uw_drupal_theme_default_search_scope');

  // Get the setting for this site's login path. This gets used in the
  // footer teamplate.
  $variables['login_url'] = theme_get_setting('uw_drupal_theme_login_url');

  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');
  $variables['site_slogan'] = $config->get('slogan');

  $variables['uw_drupal_theme_custom_quicklinks_menu'] = theme_get_setting('uw_drupal_theme_custom_quicklinks_menu');
  $variables['uw_drupal_theme_top_links_to_dropdowns'] = theme_get_setting('uw_drupal_theme_top_links_to_dropdowns');
  $variables['uw_quicklinks_markup'] = theme_get_setting('uw_drupal_theme_theme_quicklinks_markup');

  // Set hero image paths.
  $variables['uw_hero_image_front_path'] = $base_url . '/' . $theme_path . theme_get_setting('uw_drupal_theme_hero_image_front_default_path');
  $variables['uw_hero_image_front_mobile_path'] = $base_url . '/' . $theme_path . theme_get_setting('uw_drupal_theme_hero_image_front_mobile_default_path');
  $variables['uw_hero_image_other_path'] = $base_url . '/' . $theme_path . theme_get_setting('uw_drupal_theme_hero_image_other_default_path');
  $variables['uw_hero_image_other_mobile_path'] = $base_url . '/' . $theme_path . theme_get_setting('uw_drupal_theme_hero_image_other_mobile_default_path');

  // Set flags for whether we're using mobile hero images.
  $variables['uw_hero_image_front_mobile'] = theme_get_setting('uw_drupal_theme_hero_image_front_mobile');
  $variables['uw_hero_image_other_mobile'] = theme_get_setting('uw_drupal_theme_hero_image_other_mobile');

  // If the default is overridden with a file upload, reset the hero paths.
  if ((theme_get_setting('uw_drupal_theme_hero_image_front_default') === 0) && !empty(theme_get_setting('hero_image_front_upload'))) {
    $hero_front = theme_get_setting('hero_image_front_upload');
    $fid = reset($hero_front);
    if ($file = File::load($fid)) {
      $variables['uw_hero_image_front_path'] = $file->createFileUrl(TRUE);
    }
  }
  if ((theme_get_setting('uw_drupal_theme_hero_image_default') === 0) && !empty(theme_get_setting('hero_image_other_upload'))) {
    $hero_other = theme_get_setting('hero_image_other_upload');
    $fid_other = reset($hero_other);
    if ($file_other = File::load($fid_other)) {
      $variables['uw_hero_image_other_path'] = $file_other->createFileUrl(TRUE);
    }
  }
  if (theme_get_setting('uw_drupal_theme_hero_image_front_mobile') == 'yes_upload' && !empty(theme_get_setting('hero_image_front_mobile_upload'))) {
    $hero_front_mobile = theme_get_setting('hero_image_front_mobile_upload');
    $fid = reset($hero_front_mobile);
    if ($file = File::load($fid)) {
      $variables['uw_hero_image_front_mobile_path'] = $file->createFileUrl(TRUE);
    }
  }
  if (theme_get_setting('uw_drupal_theme_hero_image_other_mobile') == 'yes_upload' && !empty(theme_get_setting('hero_image_other_mobile_upload'))) {
    $hero_other_mobile = theme_get_setting('hero_image_other_mobile_upload');
    $fid = reset($hero_other_mobile);
    if ($file = File::load($fid)) {
      $variables['uw_hero_image_other_mobile_path'] = $file->createFileUrl(TRUE);
    }
  }

  // Set hero template styles.
  $variables['uw_drupal_theme_hero_template_front'] = theme_get_setting('uw_drupal_theme_hero_template_front');
  $variables['uw_drupal_theme_hero_template_other'] = theme_get_setting('uw_drupal_theme_hero_template_other');

  // Set front page title and shadow colors.
  $variables['uw_drupal_theme_front_page_title_color'] = theme_get_setting('uw_drupal_theme_front_page_title_color');
  $variables['uw_front_title_text_shadow'] = _uw_drupal_theme_get_text_shadow($variables['uw_drupal_theme_front_page_title_color']);

  // Set slant color.
  $variables['uw_drupal_theme_front_page_slant_color'] = theme_get_setting('uw_drupal_theme_front_page_slant_color');

  // Set front page motto and shadow colors.
  $variables['uw_drupal_theme_front_page_slogan_color'] = theme_get_setting('uw_drupal_theme_front_page_slogan_color');
  $variables['uw_front_slogan_text_shadow'] = _uw_drupal_theme_get_text_shadow($variables['uw_drupal_theme_front_page_slogan_color']);

}

/**
 * Implements template_preprocess_breadcrumb().
 *
 * See: https://www.drupal.org/node/743366.
 */
function uw_drupal_theme_preprocess_breadcrumb(&$variables) {
  if ($variables['breadcrumb']) {
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

    if (!empty($page_title)) {
      $variables['breadcrumb'][] = [
        'text' => $page_title,
        'attributes' => new Attribute(['class' => ['current']]),
      ];
    }
    $variables['#cache']['contexts'][] = 'url';
  }
}

/**
 * Implements template_preprocess_page_title().
 */
function uw_drupal_theme_preprocess_page_title(&$variables) {
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['is_front'] = TRUE;
  }
  $variables['uw_drupal_theme_hero_template_front'] = theme_get_setting('uw_drupal_theme_hero_template_front');
  $variables['uw_drupal_theme_hero_template_other'] = theme_get_setting('uw_drupal_theme_hero_template_other');
}

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function uw_drupal_theme_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }
  // Establish array of UW colors for select options.
  $_colors = [
    '#4b2e83' => t('Purple'),
    '#b7a57a' => t('Gold'),
    '#85754d' => t('Metallic Gold'),
    '#d9d9d9' => t('Light Grey'),
    '#444444' => t('Dark Grey'),
    '#000000' => t('Black'),
    '#ffffff' => t('White'),
  ];

  // Set array of hero template styles for select options.
  $_hero_templates = [
    'default' => t('Default'),
    'big_hero' => t('Big hero'),
    'small_hero' => t('Small hero'),
    'no_hero' => t('No image'),
    'no_title' => t('No title/image'),
  ];

  // Set array of mobile hero options.
  $_hero_mobile_options = [
    'no' => t("No. Don't have the hero-image appear on mobile devices."),
    'yes_default' => t('Yes and use the default mobile hero-image supplied with the theme.'),
    'yes_upload' => t("Yes and use an image file that I'll upload here."),
  ];

  // Set form fields for UW Drupal Theme Settings.
  $form['uw_drupal_theme'] = [
    '#type' => 'vertical_tabs',
    '#prefix' => '<h2><small>' . t('UW Drupal Theme Settings') . '</small></h2>',
    '#weight' => -11,
  ];
  $form['toggle_breadcrumb'] = [
    '#type' => 'checkbox',
    '#title' => t('Display the breadcrumb'),
    '#default_value' => theme_get_setting('features.breadcrumb'),
    '#description' => t('Show a trail of links from the homepage to the current page.'),
  ];
  //
  // Hero image tab.
  //
  $form['uw_drupal_theme_hero_image'] = [
    '#type' => 'details',
    '#title' => t('Hero Image'),
    '#group' => 'uw_drupal_theme',
  ];
  // Hero image settings for the image on the default front page.
  $form['uw_drupal_theme_hero_image']['front_page'] = [
    '#type' => 'details',
    '#title' => t('Front page hero image area'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  $form['uw_drupal_theme_hero_image']['front_page']['uw_drupal_theme_hero_template_front'] = [
    '#type' => 'radios',
    '#title' => t('Select the hero template style for the front page'),
    '#default_value' => theme_get_setting('uw_drupal_theme_hero_template_front'),
    '#options' => $_hero_templates,
  ];
  $form['uw_drupal_theme_hero_image']['front_page']['uw_drupal_theme_hero_image_front_default'] = [
    '#type' => 'checkbox',
    '#title' => t('Use the default hero-image'),
    '#default_value' => theme_get_setting('uw_drupal_theme_hero_image_front_default'),
    '#tree' => FALSE,
    '#description' => t('Check here if you want the theme to use the hero-image supplied with it.'),
  ];
  $form['uw_drupal_theme_hero_image']['front_page']['settings'] = [
    '#type' => 'container',
    '#states' => [
      // Hide the header settings when using the default header.
      'invisible' => [
        'input[name="uw_drupal_theme_hero_image_front_default"]' => ['checked' => TRUE],
      ],
    ],
  ];
  $form['uw_drupal_theme_hero_image']['front_page']['settings']['hero_image_front_upload'] = [
    '#type' => 'managed_file',
    '#title' => t('Upload front page hero image'),
    '#upload_location' => 'public://',
    '#default_value' => theme_get_setting('hero_image_front_upload'),
    '#description' => t("Use this field to upload your front-page hero-image."),
    '#upload_validators' => ['file_validate_extensions' => ['gif png jpg jpeg']],
  ];
  $form['uw_drupal_theme_hero_image']['front_page']['uw_drupal_theme_hero_image_front_mobile'] = [
    '#type' => 'radios',
    '#title' => t('Include a hero image for mobile devices?'),
    '#default_value' => theme_get_setting('uw_drupal_theme_hero_image_front_mobile'),
    '#options' => $_hero_mobile_options,
    '#tree' => FALSE,
  ];
  $form['uw_drupal_theme_hero_image']['front_page']['mobile_settings'] = [
    '#type' => 'container',
    '#states' => [
      // Hide the header settings when using the default header.
      'visible' => [
        'input[name="uw_drupal_theme_hero_image_front_mobile"]' => ['value' => 'yes_upload'],
      ],
    ],
  ];
  $form['uw_drupal_theme_hero_image']['front_page']['mobile_settings']['hero_image_front_mobile_upload'] = [
    '#type' => 'managed_file',
    '#title' => t('Upload front page hero image for mobile'),
    '#upload_location' => 'public://',
    '#default_value' => theme_get_setting('hero_image_front_mobile_upload'),
    '#description' => t("Use this field to upload your front-page mobile hero-image."),
    '#upload_validators' => ['file_validate_extensions' => ['gif png jpg jpeg']],
  ];

  // Hero image settings for the image used on other pages.
  $form['uw_drupal_theme_hero_image']['other_page'] = [
    '#type' => 'details',
    '#title' => t('Non-front page hero image'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];

  $form['uw_drupal_theme_hero_image']['other_page']['uw_drupal_theme_hero_template_other'] = [
    '#type' => 'radios',
    '#title' => t('Select the hero template style'),
    '#default_value' => theme_get_setting('uw_drupal_theme_hero_template_other'),
    '#options' => $_hero_templates,
  ];
  $form['uw_drupal_theme_hero_image']['other_page']['uw_drupal_theme_hero_image_default'] = [
    '#type' => 'checkbox',
    '#title' => t('Use the default non-front page hero image'),
    '#tree' => FALSE,
    '#default_value' => theme_get_setting('uw_drupal_theme_hero_image_default'),
    '#description' => t('Check here if you want the theme to use the hero-image supplied with it.'),
  ];
  $form['uw_drupal_theme_hero_image']['other_page']['settings'] = [
    '#type' => 'container',
    '#states' => [
      // Hide the header settings when using the default header.
      'invisible' => [
        'input[name="uw_drupal_theme_hero_image_default"]' => ['checked' => TRUE],
      ],
    ],
  ];
  $form['uw_drupal_theme_hero_image']['other_page']['settings']['hero_image_other_upload'] = [
    '#type' => 'managed_file',
    '#title' => t('Upload a non-front page hero image'),
    '#upload_location' => 'public://',
    '#default_value' => theme_get_setting('hero_image_other_upload'),
    '#description' => t("Use this field to upload your non-front page hero-image."),
    '#upload_validators' => ['file_validate_extensions' => ['gif png jpg jpeg']],
  ];
  $form['uw_drupal_theme_hero_image']['instructions'] = [
    '#type' => 'markup',
    '#markup' => t("<div class='form-item__description'>The \"Big hero\" and \"Small hero\" options above will include the \"Slogan\" from \"Basic Site Settings\" (See:&nbsp;/admin/config/system/site-information.)</div>"),
  ];

  //
  // Theme menus tab.
  //
  $form['uw_drupal_theme_theme_menus'] = [
    '#type' => 'details',
    '#title' => t('Theme menus'),
    '#group' => 'uw_drupal_theme',
  ];
  $form['uw_drupal_theme_theme_menus']['sidebar_menu'] = [
    '#type' => 'details',
    '#title' => t('Sidebar menu'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  $form['uw_drupal_theme_theme_menus']['sidebar_menu']['uw_drupal_theme_sidebar_menu_visibility'] = [
    '#type' => 'select',
    '#title' => t('Sidebar menu visibility'),
    '#default_value' => theme_get_setting('uw_drupal_theme_sidebar_menu_visibility'),
    '#options' => [
      0 => t('Hidden'),
      1 => t('Visible'),
    ],
  ];
  $form['uw_drupal_theme_theme_menus']['thinstrip_menu'] = [
    '#type' => 'details',
    '#title' => t('Thinstrip menu'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  $form['uw_drupal_theme_theme_menus']['thinstrip_menu']['description'] = [
    '#type' => 'markup',
    '#markup' => t("<p><strong>Instructions</strong><br/>The Thinstrip menu is handled as a block with a menu in it:</p><ul><li>@block_layout_link to override the standard UW WordPress theme Thinstrip menu (also known as the Audience menu).</li><li>You can modify the @thinstrip_menu_link</li><li>or adjust the @thinstrip_block_link to customize it.</li></ul><p>When the theme is first installed a Thinstrip menu (machine name: thinstrip-menu) is created if it doesn't already exist and the Thinstrip menu block is placed in the Thinstrip region, but set to Disabled.</p>", [
      '@block_layout_link' => Link::fromTextAndUrl('Enable the Thinstrip menu block', Url::fromUri('internal:/admin/structure/block'))->toString(),
      '@thinstrip_menu_link' => Link::fromTextAndUrl('Thinstrip menu items', Url::fromUri('internal:/admin/structure/menu/manage/thinstrip-menu?destination=/admin/appearance/settings/uw_drupal_theme'))->toString(),
      '@thinstrip_block_link' => Link::fromTextAndUrl('Thinstrip menu block settings', Url::fromUri('internal:/admin/structure/block/manage/uw_drupal_theme_thinstripmenu?destination=/admin/appearance/settings/uw_drupal_theme'))->toString(),
    ]),
  ];
  $form['uw_drupal_theme_theme_menus']['footer_links_menu'] = [
    '#type' => 'details',
    '#title' => t('Footer links menu'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  $form['uw_drupal_theme_theme_menus']['footer_links_menu']['description'] = [
    '#type' => 'markup',
    '#markup' => t("<p><strong>Instructions</strong><br/>The navigation links in the Footer are handled as a menu within a block using Drupal's Footer menu:</p><ul><li>@block_layout_link to override the standard UW drupal_theme theme footer links (also known as the footer-navigation nav).</li><li>You can modify the @footer_menu_link</li><li>or adjust the @footer_block_link to customize it further.</li></ul><p>When the theme is first installed the Footer menu block is placed in the Footer region, but set to Disabled.</p>", [
      '@block_layout_link' => Link::fromTextAndUrl('Enable the Footer menu block', Url::fromUri('internal:/admin/structure/block'))->toString(),
      '@footer_menu_link' => Link::fromTextAndUrl('Footer menu items', Url::fromUri('internal:/admin/structure/menu/manage/footer?destination=/admin/appearance/settings/uw_drupal_theme'))->toString(),
      '@footer_block_link' => Link::fromTextAndUrl('Footer menu block settings', Url::fromUri('internal:/admin/structure/block/manage/uw_drupal_theme_footermenu?destination=/admin/appearance/settings/uw_drupal_theme'))->toString(),
    ]),
  ];
  $form['uw_drupal_theme_theme_menus']['quicklinks_menu'] = [
    '#type' => 'details',
    '#title' => t('QuickLinks menu'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  $form['uw_drupal_theme_theme_menus']['quicklinks_menu']['uw_drupal_theme_custom_quicklinks_menu'] = [
    '#type' => 'checkbox',
    '#title' => t('Use the custom markup below for the QuickLinks menu'),
    '#tree' => FALSE,
    '#default_value' => theme_get_setting('uw_drupal_theme_custom_quicklinks_menu'),
    '#description' => t('If this is checked, the content you enter below will be shown in the QuickLinks area. If unchecked, the standard UW WordPress theme QuickLinks will show.'),
  ];
  $form['uw_drupal_theme_theme_menus']['quicklinks_menu']['uw_drupal_theme_theme_quicklinks_markup'] = [
    '#type' => 'textarea',
    '#title' => t('Enter markup for the QuickLinks menu'),
    '#default_value' => theme_get_setting('uw_drupal_theme_theme_quicklinks_markup'),
    '#description' => t('Adjust the QuickLinks markup as needed. Since the markup is complex with link classes for specific icons, it is not handled as a menu. Expand the Example starter markup below to get started.'),
  ];
  $form['uw_drupal_theme_theme_menus']['quicklinks_menu']['starter_markup'] = [
    '#type' => 'details',
    '#title' => t('Example starter markup'),
    '#description' => t("Copy this starter markup into the QuickLinks markup text area field above. This markup is the same as that in the theme's page.html.twig template file, so it's a good starting point."),
    '#open' => FALSE,
  ];
  $form['uw_drupal_theme_theme_menus']['quicklinks_menu']['starter_markup']['markup'] = [
    '#type' => 'html_tag',
    '#tag' => 'code',
    '#value' => t('@code', [
      '@code' => '<ul id="big-links">
  <li><span class="icon-myuw"></span><a href="https://my.uw.edu" tabindex=0">MyUW</a></li>
  <li><span class="icon-calendar"></span><a href="https://uw.edu/calendar/" tabindex="0">Calendar</a></li>
  <li><span class="icon-directories"></span><a href="https://uw.edu/directory/" tabindex="0">Directories</a></li>
  <li><span class="icon-libraries"></span><a href="https://lib.washington.edu" tabindex="0">Libraries</a></li>
  <li><span class="icon-medicine"></span><a href="https://uwmedicine.org" tabindex="0">UW Medicine</a></li>
  <li><span class="icon-maps"></span><a href="https://uw.edu/maps/" tabindex="0">Maps</a></li>
  <li><span class="icon-uwtoday"></span><a href="https://uw.edu/news/" tabindex="0">UW Today</a></li>
</ul>
<h3>Helpful Links</h3>
<ul id="little-links">
  <li><span class="false"></span><a href="https://itconnect.uw.edu" tabindex="0">Computing/IT</a></li>
  <li><span class="false"></span><a href="https://isc.uw.edu/" tabindex="0">Employee Self Service</a></li>
  <li><span class="false"></span><a href="https://hfs.uw.edu/Husky-Card-Services/" tabindex="0">Husky Card</a></li>
  <li><span class="false"></span><a href="https://uwb.edu" tabindex="0">UW Bothell</a></li>
  <li><span class="false"></span><a href="https://tacoma.uw.edu" tabindex="0">UW Tacoma</a></li>
  <li><span class="false"></span><a href="https://facebook.com/UofWA" tabindex="0">UW Facebook</a></li>
  <li><span class="false"></span><a href="https://twitter.com/UW" tabindex="0">UW Twitter</a></li>
</ul>',
    ]),
    '#description' => t('Use this'),
    '#prefix' => '<pre>',
    '#suffix' => '</pre>',
  ];

  $form['uw_drupal_theme_theme_menus']['uw_drupal_theme_top_links_to_dropdowns'] = [
    '#type' => 'checkbox',
    '#title' => t('Add top-level links to drop-down menus'),
    '#tree' => FALSE,
    '#default_value' => theme_get_setting('uw_drupal_theme_top_links_to_dropdowns'),
    '#description' => t('When a top-level navigation item has a node associated with it, add the top-level Menu link to the drop-down menu.'),
  ];

  // Color settings.
  $url = Url::fromUri('https://www.washington.edu/brand/graphic-elements/primary-color-palette/');
  $form['uw_drupal_theme_colors'] = [
    '#type' => 'details',
    '#title' => t('Color settings'),
    '#group' => 'uw_drupal_theme',
    '#description' => t('Set the color display of certain page elements. For color references, see:') . ' ' . (Link::fromTextAndUrl(t('UW brand color palette'), $url))->toString(),
  ];
  $form['uw_drupal_theme_colors']['front_page'] = [
    '#type' => 'fieldset',
    '#title' => t('Front page elements'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  // Front page title color.
  $form['uw_drupal_theme_colors']['front_page']['uw_drupal_theme_front_page_title_color'] = [
    '#type' => 'select',
    '#title' => t('Site name'),
    '#default_value' => theme_get_setting('uw_drupal_theme_front_page_title_color'),
    '#options' => $_colors,
  ];
  // Front page slant color.
  $form['uw_drupal_theme_colors']['front_page']['uw_drupal_theme_front_page_slant_color'] = [
    '#type' => 'select',
    '#title' => t('Slant'),
    '#default_value' => theme_get_setting('uw_drupal_theme_front_page_slant_color'),
    '#options' => $_colors,
  ];
  // Front page slogan color.
  $form['uw_drupal_theme_colors']['front_page']['uw_drupal_theme_front_sass_page_slogan_color'] = [
    '#type' => 'select',
    '#title' => t('Site slogan'),
    '#default_value' => theme_get_setting('uw_drupal_theme_front_page_slogan_color'),
    '#options' => $_colors,
  ];

  // Login url settings.
  $form['uw_drupal_theme_login'] = [
    '#type' => 'details',
    '#title' => t('Login settings'),
    '#group' => 'uw_drupal_theme',
  ];
  $form['uw_drupal_theme_login']['uw_drupal_theme_login_url'] = [
    '#type' => 'textfield',
    '#title' => t('Login url'),
    '#description' => t("Enter the url for the login link (lead with a forward slash '/'). The date in the footer will be linked to this url. Leave empty to not link the date in the footer to a login url."),
    '#default_value' => theme_get_setting('uw_drupal_theme_login_url'),
  ];

  // Search settings.
  $form['uw_drupal_theme_search'] = [
    '#type' => 'details',
    '#title' => t('Search settings'),
    '#group' => 'uw_drupal_theme',
  ];
  $form['uw_drupal_theme_search']['uw_drupal_theme_default_search_scope'] = [
    '#type' => 'select',
    '#title' => t('Choose default search scope'),
    '#options' => [
      'uw' => t('All the UW'),
      'site' => t('Current site'),
    ],
    '#default_value' => theme_get_setting('uw_drupal_theme_default_search_scope'),
  ];

  // @todo Figure out if ['components']['navbar'] background options needed;
  // these came from starter theme:
  // https://www.drupal.org/project/bootstrap_sass.
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function uw_drupal_theme_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  // Check first that the input is a submit.
  if ($variables['theme_hook_original'] == 'input__submit') {
    // kint($variables);
    $element = $variables['element'];

    // We want to target the #uw-search-submit only so we can use a
    // template file to remove some classes from it.
    if ($element['#attributes']['id'] == 'uw-search-submit') {
      $suggestions[] = 'input__submit__' . strtr('uw-search-submit', '-', '_');
    }
  }
}

/**
 * Implements template_preprocess_form_element_label().
 */
function uw_drupal_theme_preprocess_form_element_label(&$variables) {

  $element = $variables['element'];
  // Target the label for the search input (keys).
  if ($element['#id'] == 'edit-keys') {
    // Change the for attribute to match the id we're overriding elsewhere
    // to uw-search-bar.
    $variables['attributes']['for'] = 'uw-search-bar';
  }
}

/**
 * Implements template_preprocess_form().
 */
function uw_drupal_theme_preprocess_form(&$variables) {

  // Check if the form's id starts with 'search-block-form' because we're
  // only trying to target the search block form with this.
  if (str_contains($variables['attributes']['id'], 'search-block-form')) {

    $default_search_scope = theme_get_setting('uw_drupal_theme_default_search_scope');
    $variables['attributes']['class'][] = 'uw-search';

    // Set this to the form's curemt action.
    $variables['attributes']['data-sitesearch'] = $variables['attributes']['action'];

    // Setting the form action if the default search scope theme setting is
    // set to 'uw'. This needs to happen after setting the data-sitesearch
    // attribute.
    if ($default_search_scope == 'uw') {
      $variables['attributes']['action'] = "https://uw.edu/search";
    }
  }
}

/**
 * Implements template_preprocess_radios().
 */
function uw_drupal_theme_preprocess_radios(&$variables) {
  // We're targeting the #search-labels div to add two classes
  // for the search block form.
  if ($variables['attributes']['id'] == 'search-labels') {
    $variables['attributes']['class'][] = 'labels';
    $variables['attributes']['class'][] = 'hidden-xs';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Here we're adding $scope_search_options radio buttons and mobile
 * select list. In addition, there we're customizing the form's attributes
 * so the final HMTL output closely resembles what's output in the UW WP theme.
 */
function uw_drupal_theme_form_search_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $default_search_scope = theme_get_setting('uw_drupal_theme_default_search_scope');
  // kint($default_search_scope);
  if ($default_search_scope == 'site') {
    $scope_search_options = [
      'site' => t('Current site'),
      'uw' => t('All the UW'),
    ];
    // @todo get from theme settings
    $form['keys']['#attributes']['name'] = "keys";
  }
  else {
    $scope_search_options = [
      'uw' => t('All the UW'),
      'site' => t('Current site'),
    ];
    // This is the default for uw.edu search.
    $form['keys']['#attributes']['name'] = "q";
  }
  // kint($form);
  $form['actions']['submit']['#attributes']['class'][] = 'search';

  // Setting the id for the <submit> here so we can target it in
  // uw_drupal_theme_theme_suggestions_input_alter(). From there we suggest
  // a specific twig template file to use just for the search block form.
  $form['actions']['submit']['#attributes']['id'] = 'uw-search-submit';

  $form['keys']['#attributes']['placeholder'] = t('Search');
  $form['keys']['#attributes']['id'] = "uw-search-bar";

  $form['keys']['#prefix'] = '<div class="search-form-wrapper">';
  $form['keys']['#suffix'] = '</div>';

  $form['mobile-search-select'] = [
    '#type' => 'select',
    '#default_value' => $default_search_scope,
    '#weight' => '50',
    '#attributes' => [
      'class' => ['visible-xs'],
      'id' => 'mobile-search-select',
      'aria-label' => 'Search scope',
      'name' => '',
    ],
    '#options' => $scope_search_options,
    '#required' => TRUE,
  ];
  $form['scope'] = [
    '#type' => 'fieldset',
    '#weight' => 100,
    '#title' => t('Search scope'),
    '#title_display' => 'invisible',
    '#attributes' => [
      'class' => ['search-scope-wrapper'],
    ],
  ];
  $form['scope']['search'] = [
    '#type' => 'radios',
    '#default_value' => $default_search_scope,
    '#options' => $scope_search_options,
    '#id' => 'search-labels',
    '#attributes' => [
      'class' => ['radiobtn'],
    ],
  ];
  // kint($form);
}

/**
 * Builds the sidebar menu.
 *
 * @return bool|array
 *   Returns a render array of the menu if we should render the menu.
 *   Returns false if we shouldn't render it.
 */
function _uw_drupal_theme_build_uw_sidebar_menu() {
  // If the theme setting is not set to 1 (Visible), then we don't need to
  // go any further.
  if (!theme_get_setting('uw_drupal_theme_sidebar_menu_visibility')) {
    return FALSE;
  }

  $menu_name = 'main';
  $menu_tree = \Drupal::menuTree();
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);
  $where_are_we = \Drupal::service('menu.active_trail')->getActiveLink($menu_name);
  $where_are_we_id = ($where_are_we) ? $where_are_we->getPluginId() : '';

  // kint($where_are_we);
  // kint($where_are_we_id);
  // kint($parameters);
  // If we have an empty string for $where_are_we, which is the
  // current ActiveLink, then we're at the menu root. We don't need
  // to show the sidebar menu, so return false.
  if (empty($where_are_we_id)) {
    return FALSE;
  }
  // Set the level to where we.
  $level = count($parameters->activeTrail);
  // kint($level);
  // Only show the menu items for the current active trail and adjust the root
  // according to the current position in the menu in order to determine if we
  // can show the subtree.
  // Active trail array is child-first. Reverse it and pull the new menu
  // root based on the parent of the start level.
  $menu_trail_ids = array_reverse(array_values($parameters->activeTrail));
  // kint($menu_trail_ids);
  // Set the offset to 2 if we are past $level of 2 to prevent siblings
  // from showing if we're only 1 level beneath the main menu.
  $offset = ($level > 2 ? 2 : 1);

  // Get the menu trail id that we want to use to setRoot.
  $menu_root = $menu_trail_ids[$level - $offset];

  $parameters->setRoot($menu_root);

  // Load the tree.
  $tree = $menu_tree->load($menu_name, $parameters);
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];
  $tree = $menu_tree->transform($tree, $manipulators);

  // Check the start of the tree to see if it has children.
  // If it has no children, then we don't need to show the sidebar menu.
  // The start of the tree is one above the level that we're on because of the
  // offset accomplished above.
  $tree_root_has_children = array_values($tree)[0]->hasChildren;
  if (!$tree_root_has_children) {
    return FALSE;
  }

  $build = $menu_tree->build($tree);

  // Update the items in the $build
  // We at least want to add a class for the active menu item <li>
  // we'll do this by walking through the array (if additional manipulations
  // are needed in the future, the _uw_drupal_theme_walk_tree
  // function could be enhanced).
  $build_items_walked = _uw_drupal_theme_walk_tree($build['#items'], $where_are_we_id);
  if (!$build_items_walked) {
    return FALSE;
  }
  else {
    $build['#items'] = $build_items_walked;
    $build['#title'] = [
      '#markup' => 'UW Sidebar Menu',
    ];
    $build['#theme'] = 'menu__main__uwsidebarmenu';
    // kint($build);
    return $build;
  }
}

/**
 * Local function.
 *
 * Builds a side menu based on the current path.
 *
 * @param array $build_items
 *   Render array #items to walk through.
 * @param string $menuLinkPluginId
 *   The string for the id of the current menu item we're on.
 *
 * @return array
 *   The returned array consists of render array #items.
 */
function _uw_drupal_theme_walk_tree(array $build_items, $menuLinkPluginId): array {
  $build_items_revised = [];

  foreach ($build_items as $index => $item) {
    // The index of the $item is the pluginId for the menulink we're trying
    // to find.
    $compare = $index;
    if ($compare == $menuLinkPluginId) {
      // Since the menuLinkPluginId matches, add the .active class for
      // its attributes.
      $item['attributes']->addClass('active');
      $build_items_revised[$index] = $item;
    }
    else {
      // Don't add any classes, just add the item to the return array.
      $build_items_revised[$index] = $item;
    }
    if ($item['below']) {
      // MenuLinkContent has items below it, so we need to run each of those
      // through same function passing in our compare menuLinkPluginId again.
      $build_items_revised[$index]['below'] = _uw_drupal_theme_walk_tree($item['below'], $menuLinkPluginId);
    }
  }
  return $build_items_revised;
}

/**
 * Local function that gets the text-shadow setting for the provided color.
 *
 * @param string $color
 *   String containing a hex value.
 *
 * @return string
 *   The theme setting value for uw_drupal_theme_text_shadow_black or
 *   uw_drupal_theme_text_shadow_white.
 */
function _uw_drupal_theme_get_text_shadow($color) {
  $retval = '';
  switch ($color) {
    case UwColor::WHITE:
    case UwColor::LIGHT_GREY:
    case UwColor::GOLD:
      $retval = theme_get_setting('uw_drupal_theme_text_shadow_black');
      break;

    case UwColor::PURPLE:
    case UwColor::METALLIC_GOLD:
    case UwColor::DARK_GREY:
    case UwColor::BLACK:
      $retval = theme_get_setting('uw_drupal_theme_text_sass_shadow_white');
      break;

    default:
      $retval = theme_get_setting('uw_drupal_theme_text_sass_shadow_black');
      break;
  }
  return $retval;
}
